<?xml version="1.0" encoding="UTF-8"?>
<tmfxml xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:noNamespaceSchemaLocation="xmlDefinition.xsd">

<callstack id="org.eclipse.tracecompass.incubator.example.tracecompass.grouped.threads">
    <callstackGroup name="Tensorflow Callstack">
        <!-- <level path="call_stack/*" /> -->
		<level path="Views/*" />
		<level path="Threads/*"/>
		<!-- <thread cpu="cpu" /> -->
		<!-- <thread level="0"/> -->
    </callstackGroup>
	<pattern version="0" id="tensorflow_cs_pattern">
		<head>
			<traceType id="org.eclipse.linuxtools.lttng2.ust.tracetype" />
			<label value="Tensorflow" />
		</head>

		<location id="CurrentThread">
			<stateAttribute type="constant" value="Views" />
			<stateAttribute type="query">
				<stateAttribute type="constant" value="#CurrentScenario" />
				<stateAttribute type="constant" value="component" />
			</stateAttribute>
			<stateAttribute type="constant" value="Threads" />
			<stateAttribute type="pool" />
		</location>

		<patternHandler>

			<test id="thread_thread">
				<if>
					<condition>
						<stateValue type="eventField" value="context._vtid"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="threadID" />
						</stateValue>
					</condition>
				</if>
			</test>

			<test id="name_name">
				<if>
					<condition>
						<stateValue type="eventField" value="cat"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="component" />
						</stateValue>
					</condition>
				</if>
			</test>
			<test id="async_name">
				<if>
					<condition>
						<stateValue type="eventField" value="name"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="name" />
						</stateValue>
					</condition>
				</if>
			</test>




			<test id="python_start">
				<if>
					<condition>
						<stateValue type="eventField" value="logger_name"/>
						<stateValue type="string" value="my-begin-logger"/>

					</condition>
				</if>
			</test>

			<test id="python_end">
				<if>
					<condition>
						<stateValue type="eventField" value="logger_name"/>
						<stateValue type="string" value="my-end-logger"/>

					</condition>
				</if>
			</test>
			<test id="grpctest">
				<if>
					<condition>
						<stateValue type="eventField" value="rendezvous_key"/>
						<stateValue type="query">
							<stateAttribute type="constant" value="#CurrentScenario" />
							<stateAttribute type="constant" value="rendezvous_key" />
						</stateValue>
					</condition>
				</if>
			</test>

			<test id="last_out">
				<if>
					<condition>
						<stateValue type="query">
							<stateAttribute type="location" value="CurrentThread" />
							<stateAttribute type="constant" value="CallStack" />
						</stateValue>
						<stateValue type="int" value="1" />
					</condition>
				</if>
			</test>

			<test id="is_start">
				<if>
					<or>
						<condition>
							<stateValue type="eventName"/>
							<stateValue type="string" value="tensorflowTracer:*_start"/>
						</condition>
						<condition>
							<stateValue type="eventName"/>
							<stateValue type="string" value="tensorflowTracer:*_entry"/>
						</condition>
					</or>
				</if>
			</test>
			<test id="is_end">
				<if>
					<or>
						<condition>
							<stateValue type="eventName"/>
							<stateValue type="string" value="tensorflowTracer:*_end"/>
						</condition>
						<condition>
							<stateValue type="eventName"/>
							<stateValue type="string" value="tensorflowTracer:*_exit"/>
						</condition>
					</or>
				</if>
			</test>


			<action id="entering_thread">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid"/>
				</stateChange>

				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="component" />
					<stateValue type="eventField" value="cat"/>
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="name" />
					<stateValue type="eventField" value="name"/>
				</stateChange>
			</action>

			<action id="entering_thread_python">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid"/>
				</stateChange>

				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="component" />
					<stateValue type="string" value="python"/>
				</stateChange>
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="name" />
					<stateValue type="eventField" value="name"/>
				</stateChange>
			</action>
			<action id="entering_thread_grpc">
				<!-- Initialize current scenario data: component, type of thread, queries and drawing event counts -->
				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="threadID" />
					<stateValue type="eventField" value="context._vtid"/>
				</stateChange>

				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="component" />
					<stateValue type="eventField" value="cat"/>
				</stateChange>

				<stateChange>
					<stateAttribute type="constant" value="#CurrentScenario" />
					<stateAttribute type="constant" value="rendezvous_key" />
					<stateValue type="eventField" value="rendezvous_key"/>
				</stateChange>
			</action>

			<action id="push_event_type">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
						<stateAttribute type="location" value="CurrentThread" />
						<stateAttribute type="constant" value="CallStack" />
						<stateValue type="eventField" value="name" stack="push"/>
				</stateChange>
				<!-- <stateChange>
						<stateAttribute type="location" value="CurrentThread" />
						<stateAttribute type="constant" value="cpu" />
						<stateValue type="eventField" value="cpu" />
				</stateChange> -->
			</action>
			<action id="pop_event_type">
				<!-- Pop the current event from the callstack -->
				<stateChange>
						<stateAttribute type="location" value="CurrentThread" />
						<stateAttribute type="constant" value="CallStack" />
						<stateValue type="eventField" value="name" stack="pop"/>
				</stateChange>
			</action>

			<action id="push_python">
				<!-- Push the current event to the thread's callstack -->
				<stateChange>
						<stateAttribute type="location" value="CurrentThread" />
						<stateAttribute type="constant" value="CallStack" />
						<stateValue type="eventField" value="msg" stack="push"/>
				</stateChange>
				<!-- <stateChange>
						<stateAttribute type="location" value="CurrentThread" />
						<stateAttribute type="constant" value="cpu" />
						<stateValue type="eventField" value="cpu" />
				</stateChange> -->
			</action>
			<action id="pop_python">
				<!-- Pop the current event from the callstack -->
				<stateChange>
						<stateAttribute type="location" value="CurrentThread" />
						<stateAttribute type="constant" value="CallStack" />
						<stateValue type="eventField" value="msg" stack="pop"/>
				</stateChange>
			</action>


			<!-- <action id="entry">
				<stateChange>
					<stateAttribute type="constant" value="call_stack" />
					<stateAttribute type="eventField" value="context._vtid" />
					<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="name" stack="push" />
				</stateChange>
			</action>

			<action id="exit">
				<stateChange>
					<stateAttribute type="constant" value="call_stack" />
					<stateAttribute type="eventField" value="context._vtid" />
					<stateAttribute type="constant" value="CallStack" />
					<stateValue type="eventField" value="name" stack="pop" />
				</stateChange>
			</action> -->

			<fsm id="tgcall_stack" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
				<state id="Wait_thread_start">
					<!-- The state will stay here until we have a thread start event -->

					<transition event="*_entry" target="loop" action="entering_thread:push_event_type"/>

					<!-- <transition event="hcc*_begin" target="loop" action="entering_thread:push_event_type"/> -->
					<!-- <transition event="tensorflowTracer:*operation_start" target="loop" action="entering_thread:push_event_type"/> -->
					<!-- <transition event="tensorflowTracer:*entry" target="loop" action="entering_thread:push_event_type"/> -->

				</state>
				<state id="loop">

					<transition event="*_entry" cond="name_name" target="loop" action="push_event_type" />
					<transition event="*_exit" cond="name_name:last_out" target="end_thread" action="pop_event_type"/>
					<transition event="*_exit" cond="name_name" target="loop" action="pop_event_type" />

					<!-- <transition event="hcc*_begin" cond="name_name" target="loop" action="push_event_type" />
					<transition event="hcc*_end" cond="name_name:last_out" target="end_thread" action="pop_event_type"/>
					<transition event="hcc*_end" cond="name_name" target="loop" action="pop_event_type" /> -->

					<!-- <transition event="tensorflowTracer:*_entry" cond="thread_thread" target="loop" action="push_event_type" /> -->
					<!-- <transition event="tensorflowTracer:*_exit" cond="thread_thread:last_out" target="end_thread" action="pop_event_type"/> -->
					<!-- <transition event="tensorflowTracer:*_exit" cond="thread_thread" target="loop" action="pop_event_type" /> -->



					<!-- <transition event="tensorflowTracer:operation_start" target="loop" action="push_event_type" /> -->
					<!-- <transition event="tensorflowTracer:operation_end"   target="loop" action="pop_event_type" /> -->

					<!-- <transition event="tensorflowTracer:operation_end" cond="thread_thread:last_out" target="end_thread" action="push_event_type"/> -->

					<!--
					<transition event="hccTracer:*begin" target="loop" action="entry" />
					<transition event="hccTracer:*end" target="loop" action="exit" />
					<transition event="hccTracer:*entry" target="loop" action="entry" />
					<transition event="hccTracer:*exit" target="loop" action="exit" />

					<transition event="eigenTracer:schedule_entry" target="loop" action="entry" />
					<transition event="eigenTracer:schedule_exit" target="loop" action="exit" />

					<transition event="grpcTracer:send_request" target="loop" action="entry" />
					<transition event="grpcTracer:receive_request" target="loop" action="exit" />
					<transition event="grpcTracer:send_RecvTensor_request" target="loop" action="entry" />
					<transition event="grpcTracer:receive_RecvTensor_request" target="loop" action="exit" />

					<transition event="tensorflowTracer:*_entry" cond="is_start" target="loop" action="entry" />
					<transition event="tensorflowTracer:*_exit" cond="is_start" target="loop" action="exit" />
					<transition event="tensorflowTracer:*_start" cond="is_start" target="loop" action="entry" />
					<transition event="tensorflowTracer:*_end" cond="is_start" target="loop" action="exit" /> -->

				</state>
				<final id="end_thread"/>

			</fsm>

			<fsm id="tgcall_stack2" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
				<state id="Wait_thread_start">
					<!-- The state will stay here until we have a thread start event -->

					<transition event="hcc*_begin" target="loop" action="entering_thread:push_event_type"/>

				</state>
				<state id="loop">

					<transition event="hcc*_begin" cond="name_name" target="loop" action="push_event_type" />
					<transition event="hcc*_end" cond="name_name:last_out" target="end_thread" action="pop_event_type"/>
					<transition event="hcc*_end" cond="name_name" target="loop" action="pop_event_type" />

				</state>
				<final id="end_thread"/>

			</fsm>


			<fsm id="tgcall_stack3" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
			    <state id="Wait_thread_start">
			        <!-- The state will stay here until we have a thread start event -->

			        <transition event="tensorflowTracer:session_start" target="loop" action="entering_thread:push_event_type"/>

			    </state>
			    <state id="loop">

			        <transition event="tensorflowTracer:session_start" cond="name_name" target="loop" action="push_event_type" />
			        <transition event="tensorflowTracer:session_end" cond="name_name:last_out" target="end_thread" action="pop_event_type"/>
			        <transition event="tensorflowTracer:session_end" cond="name_name" target="loop" action="pop_event_type" />

			    </state>
			    <final id="end_thread"/>

			</fsm>


			<fsm id="tgcall_stack4" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
				<state id="Wait_thread_start">
					<!-- The state will stay here until we have a thread start event -->

					<transition event="tensorflowTracer:operation_start" target="loop" action="entering_thread:push_event_type"/>

				</state>
				<state id="loop">

					<transition event="tensorflowTracer:operation_start" cond="name_name" target="loop" action="push_event_type" />
					<transition event="tensorflowTracer:operation_end" cond="name_name:last_out" target="end_thread" action="pop_event_type"/>
					<transition event="tensorflowTracer:operation_end" cond="name_name" target="loop" action="pop_event_type" />

				</state>
				<final id="end_thread"/>

			</fsm>



			<fsm id="tgcall_stack5" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
				<state id="Wait_thread_start">
					<!-- The state will stay here until we have a thread start event -->

					<transition event="tensorflowTracer:async_operation_start" target="loop" action="entering_thread:push_event_type"/>

				</state>
				<state id="loop">

					<transition event="tensorflowTracer:async_operation_start" cond="async_name" target="loop" action="push_event_type" />
					<transition event="tensorflowTracer:async_operation_end" cond="async_name:last_out" target="end_thread" action="pop_event_type"/>
					<transition event="tensorflowTracer:async_operation_end" cond="async_name" target="loop" action="pop_event_type" />

				</state>
				<final id="end_thread"/>

			</fsm>

			<fsm id="tgcall_stack6" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
				<state id="Wait_thread_start">
					<!-- The state will stay here until we have a thread start event -->

					<transition event="grpcTracer:send_RecvTensor_request" target="loop" action="entering_thread_grpc:push_event_type"/>

				</state>
				<state id="loop">

					<transition event="grpcTracer:send_RecvTensor_request" cond="grpctest" target="loop" action="push_event_type" />
					<transition event="grpcTracer:receive_RecvTensor_request" cond="grpctest:last_out" target="end_thread" action="pop_event_type"/>
					<transition event="grpcTracer:receive_RecvTensor_request" cond="grpctest" target="loop" action="pop_event_type" />

				</state>
				<final id="end_thread"/>

			</fsm>



			<fsm id="tgcall_stack7" multiple="true" initial="Wait_thread_start">
			<!-- <fsm id="tfcall_stck" initial="Wait_thread_start"> -->
				<state id="Wait_thread_start">
					<!-- The state will stay here until we have a thread start event -->

					<transition event="lttng_python:event" cond="python_start" target="loop" action="entering_thread_python:push_python"/>

				</state>
				<state id="loop">

					<transition event="lttng_python:event" cond="python_start" target="loop" action="push_python" />
					<transition event="lttng_python:event" cond="python_end:last_out" target="end_thread" action="pop_python"/>
					<transition event="lttng_python:event" cond="python_end" target="loop" action="pop_python" />



				</state>
				<final id="end_thread"/>

			</fsm>
		</patternHandler>

	</pattern>
</callstack>

	<!-- <timeGraphView id="tensorflow_cs_view">
		<head>
			<analysis id="tensorflow_cs_pattern" />
			<label value="tensorflow call stack view" />
		</head>

		<entry path="CurrentThread/*">
			<display type="self" />
			<entry path="*">
				<display type="self" />
			</entry>
		</entry>
	</timeGraphView> -->
</tmfxml>
